### turn off selinux
- name: ensure selinux is disabled
  selinux:
    state: disabled

### turn off firewall, let docker manage

- name: ensure iptables and firewalld are off, let docker manage it
  service:
    name: "{{ item }}"
    state: stopped
  with_items: ["iptables.service", "firewalld"]
  ignore_errors: yes

### docker

- name: ensure docker is installed
  yum:
    name: docker
    state: present

### yum repo

- name: install centos 7 virt common repo
  yum_repository:
    name: virt7-docker-common-release
    description: virt7-docker-common-release
    baseurl: http://cbs.centos.org/repos/virt7-docker-common-release/x86_64/os/
    gpgcheck: no
    enabled: yes

### kubernetes packages

- name: ensure kubernetes, etcd, and flanneld are installed
  yum:
    name: "{{ item }}"
    state: present
  with_items: ["kubernetes", "etcd", "flannel"]

### service account key

# - name: stat service account key
#   stat:
#     path: "{{ kubernetes_service_account_key_file_path }}"
#   register: st_service_account_key
#   when: kube_node_type == "master"
#
# - block:
#
#   - name: generate service account key
#     shell: "openssl genrsa -out {{ kubernetes_service_account_key_file_path }} 2048"
#
#   - name: set service account key ownership and permission
#     file:
#       path: "{{ kubernetes_service_account_key_file_path }}"
#       owner: kube
#       group: kube
#       mode: 0700
#
#   - name: restart kube-apiserver and kube-controller-manager
#     service:
#       name: "{{ item }}"
#       state: restarted
#     with_items: ["kube-apiserver", "kube-controller-manager"]
#
#   when: kube_node_type == "master" and not st_service_account_key.stat.exists

### certs

- name: ensure /srv/kubernetes exists and owned by kube
  file:
    name: /srv/kubernetes
    owner: kube
    group: kube
    mode: 0644
    state: directory

- name: check if ca cert exists
  state:
    path: /srv/kubernetes/ca.crt
  register: st_ca_cert

- block:

  - name: create ca cert
    shell: openssl genrsa -out /srv/kubernetes/ca.key 4096

  when: not st_ca_cert.stat.exists

### etcd

- block:

  - name: configure etcd server
    template:
      src: etc.etcd.etcd.conf.j2
      dest: /etc/etcd/etcd.conf
      owner: root
      group: root
      mode: 0644
    notify:
      - restart etcd

  - name: flush etcd
    meta: flush_handlers

  - name: ensure etcd is running
    service:
      name: etcd
      state: started
      enabled: yes

  - name: check if network overlay config is in place
    shell: /usr/bin/etcdctl get /kube-centos/network/config
    register: etcd_check_network_overlay_config
    ignore_errors: yes

  - block:

    - name: deploy etcd network overlay settings init script
      copy:
        src: init_etcd_network_overlay.sh
        dest: /root/init_etcd_network_overlay.sh
        owner: root
        group: root
        mode: 0700

    - name: initialize network overlay settings in etcd
      shell: /bin/sh /root/init_etcd_network_overlay.sh

    when: etcd_check_network_overlay_config.rc != 0

  - name: remove etcd network overlay settings init script
    file:
      path: /root/init_etcd_network_overlay.sh
      state: absent

  when: kube_node_type == "master"

### flannel
- name: configure flanneld
  template:
    src: etc.sysconfig.flanneld.j2
    dest: /etc/sysconfig/flanneld
    owner: root
    group: root
    mode: 0644
  notify:
    - restart flanneld

- name: flush flanneld
  meta: flush_handlers

### kubernetes

- name: configure kubernetes config file
  template:
    src: etc.kubernetes.config.j2
    dest: /etc/kubernetes/config
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kube-apiserver
    - restart kube-controller-manager
    - restart kube-scheduler
    - restart kubelet
    - restart kube-proxy

- name: configure kubernetes api server
  template:
    src: etc.kubernetes.apiserver.j2
    dest: /etc/kubernetes/apiserver
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kube-apiserver
  when: kube_node_type == "master"

- name: configure kubernetes controller manager
  template:
    src: etc.kubernetes.controller-manager.j2
    dest: /etc/kubernetes/controller-manager
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kube-controller-manager
  when: kube_node_type == "master"

- name: configure kubelet
  template:
    src: etc.kubernetes.kubelet.j2
    dest: /etc/kubernetes/kubelet
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kubelet
  when: kube_node_type == "minion"

### services

- name: enable master services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items: ["etcd", "kube-apiserver", "kube-controller-manager", "kube-scheduler", "flanneld"]
  when: kube_node_type == "master"

- name: disable master services
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  with_items: ["docker", "kubelet", "kube-proxy"]
  when: kube_node_type == "master"

- name: enable minion services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items: ["kube-proxy", "kubelet", "flanneld", "docker"]
  when: kube_node_type == "minion"

- name: disable minion services
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  with_items: ["etcd", "kube-apiserver", "kube-controller-manager", "kube-scheduler"]
  when: kube_node_type == "minion"
